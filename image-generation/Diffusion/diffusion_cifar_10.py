# -*- coding: utf-8 -*-
"""Diffusion_CIFAR-10.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1rVgw4mdHdkBSii9v3IjuwNB2mGsTnRih
"""

pip install diffusers transformers accelerate torch torchvision matplotlib

from diffusers import DDPMScheduler
import matplotlib.pyplot as plt
import torch

# Set up the same pretrained model and scheduler
from diffusers import DDPMPipeline

pipeline = DDPMPipeline.from_pretrained("google/ddpm-cifar10-32")
pipeline = pipeline.to("cuda" if torch.cuda.is_available() else "cpu")
scheduler = pipeline.scheduler
unet = pipeline.unet

# Step 1: Start with pure noise
num_steps = 50
noise = torch.randn(1, 3, 32, 32).to(pipeline.device)  # shape: [B, C, H, W]
x = noise.clone()  # Save for plotting

# Step 2: Denoise step by step
for t in scheduler.timesteps:
    with torch.no_grad():
        # Predict noise in image
        noise_pred = unet(x, t).sample
    # Compute previous x_t using the scheduler
    x = scheduler.step(noise_pred, t, x).prev_sample

# Convert to PIL
from torchvision.transforms.functional import to_pil_image

start_image = to_pil_image((noise[0].cpu() * 0.5 + 0.5).clamp(0, 1))  # [-1, 1] â†’ [0, 1]
final_image = to_pil_image((x[0].cpu() * 0.5 + 0.5).clamp(0, 1))

# Step 3: Plot side by side
plt.figure(figsize=(5, 2.5))

plt.subplot(1, 2, 1)
plt.imshow(start_image, interpolation='nearest')
plt.axis("off")
plt.title("Start (Pure Noise)")

plt.subplot(1, 2, 2)
plt.imshow(final_image, interpolation='nearest')
plt.axis("off")
plt.title("Final (Denoised)")

plt.tight_layout()
plt.show()

